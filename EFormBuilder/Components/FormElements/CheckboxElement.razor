@inherits FormElementBase

<div class="form-builder-item @(IsEditing ? "active" : "")" draggable="true" 
     data-element-id="@Element.Id" data-element-type="checkbox"
     @onclick="SelectElement" @ondblclick="ToggleEdit">
    @if (IsEditing)
    {
        <div class="p-4">
            <div class="form-group">
                <label class="form-label">Label</label>
                <input type="text" class="form-input" @bind="Element.Label" @bind:event="oninput" />
            </div>
            <div class="form-group">
                <label class="form-label">Help Text</label>
                <input type="text" class="form-input" @bind="Element.HelpText" @bind:event="oninput" />
            </div>
            <div class="form-group">
                <div class="flex items-center">
                    <input type="checkbox" id="required-@Element.Id" class="mr-2" 
                           @bind="Element.Required" @bind:event="oninput" />
                    <label for="required-@Element.Id">Required</label>
                </div>
            </div>
            <div class="form-group">
                <div class="flex items-center">
                    <input type="checkbox" id="default-@Element.Id" class="mr-2" 
                           @bind="IsCheckedByDefault" @bind:event="oninput" />
                    <label for="default-@Element.Id">Checked by default</label>
                </div>
            </div>
            <div class="flex space-x-2 mt-4">
                <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
                <button class="btn btn-secondary" @onclick="ToggleEdit">Cancel</button>
                <button class="btn btn-danger ml-auto" @onclick="DeleteElement">Delete</button>
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="flex items-center">
                <input type="checkbox" id="checkbox-@Element.Id" class="mr-2" 
                       checked="@IsCheckedByDefault" disabled="@IsPreview" />
                <label for="checkbox-@Element.Id" class="cursor-pointer">@Element.Label @(Element.Required ? "*" : "")</label>
            </div>
            @if (!string.IsNullOrEmpty(Element.HelpText))
            {
                <div class="text-sm text-gray-500 mt-1">@Element.HelpText</div>
            }
        </div>
    }
</div>

@code {
    private bool _isEditing = false;
    private bool IsCheckedByDefault
    {
        get => Element.DefaultValue == "true";
        set => Element.DefaultValue = value ? "true" : "false";
    }

    protected override void OnParametersSet()
    {
        _isEditing = IsEditing;
        base.OnParametersSet();
    }

    private void ToggleEdit()
    {
        _isEditing = !_isEditing;
        IsEditing = _isEditing;
    }

    private async Task SaveChanges()
    {
        await UpdateElement();
        ToggleEdit();
    }
}