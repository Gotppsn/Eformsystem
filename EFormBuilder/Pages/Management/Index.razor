// Path: EFormBuilder/Pages/Management/Index.razor
@page "/management"
@using EFormBuilder.Models
@using EFormBuilder.Services
@inject IFormService FormService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mx-auto px-4 py-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Department Form Management</h1>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div class="md:col-span-1">
            <div class="bg-white rounded-lg shadow-md overflow-hidden mb-6">
                <div class="p-4 bg-gray-50 border-b">
                    <h3 class="font-semibold">Departments</h3>
                </div>
                <div class="p-4">
                    <ul class="divide-y divide-gray-200">
                        <li class="py-2 hover:bg-gray-50 cursor-pointer @(selectedDepartment == "" ? "text-primary font-medium" : "")" @onclick="@(() => SelectDepartment(""))">
                            All Departments
                        </li>
                        @foreach (var department in GetUniqueDepartments())
                        {
                            <li class="py-2 hover:bg-gray-50 cursor-pointer @(selectedDepartment == department ? "text-primary font-medium" : "")" @onclick="() => SelectDepartment(department)">
                                @department
                            </li>
                        }
                    </ul>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="p-4 bg-gray-50 border-b">
                    <h3 class="font-semibold">Actions</h3>
                </div>
                <div class="p-4">
                    <a href="/forms/builder" class="btn btn-primary w-full mb-2">
                        <i class="fas fa-plus-circle mr-2"></i> Create New Form
                    </a>
                    @if (!string.IsNullOrEmpty(selectedDepartment))
                    {
                        <button class="btn btn-secondary w-full" @onclick="() => ExportDepartmentFormsReport()">
                            <i class="fas fa-file-export mr-2"></i> Export Department Report
                        </button>
                    }
                </div>
            </div>
        </div>
        
        <div class="md:col-span-3">
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="p-4 bg-gray-50 border-b flex justify-between items-center">
                    <h3 class="font-semibold">
                        @(string.IsNullOrEmpty(selectedDepartment) ? "All Forms" : $"{selectedDepartment} Forms")
                    </h3>
                    <div class="flex items-center">
                        <input type="text" class="form-input h-8" placeholder="Search forms..." 
                               @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterForms" />
                    </div>
                </div>
                
                @if (FilteredForms == null)
                {
                    <div class="p-16 text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                }
                else if (FilteredForms.Count == 0)
                {
                    <div class="p-16 text-center">
                        <div class="text-6xl text-gray-300 mb-4">
                            <i class="fas fa-folder-open"></i>
                        </div>
                        <h3 class="text-xl font-semibold mb-2">No Forms Found</h3>
                        <p class="text-gray-500 mb-4">
                            @(string.IsNullOrEmpty(searchTerm) ? 
                                (string.IsNullOrEmpty(selectedDepartment) ? 
                                    "No forms have been created yet." : 
                                    $"No forms have been created for {selectedDepartment}.") : 
                                "No forms match your search criteria.")
                        </p>
                        <a href="/forms/builder" class="btn btn-primary">
                            <i class="fas fa-plus-circle mr-2"></i> Create Form
                        </a>
                    </div>
                }
                else
                {
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Title
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Department
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Created
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Status
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Submissions
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach (var form in FilteredForms)
                                {
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900">@form.Title</div>
                                            <div class="text-sm text-gray-500">@(string.IsNullOrEmpty(form.Description) ? "No description" : form.Description)</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @form.Department
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @form.CreatedDate.ToString("MMM dd, yyyy")
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                @(form.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            @(GetSubmissionCount(form.Id))
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <a href="/forms/builder/@form.Id" class="text-primary hover:text-primary-dark mr-3">
                                                Edit
                                            </a>
                                            <a href="/forms/submissions/@form.Id" class="text-secondary hover:text-gray-700 mr-3">
                                                Submissions
                                            </a>
                                            <a href="/forms/@form.Id" class="text-success hover:text-green-700 mr-3">
                                                Fill
                                            </a>
                                            <button @onclick="() => DeleteForm(form.Id)" class="text-danger hover:text-red-700">
                                                Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<FormTemplate> AllForms { get; set; }
    private List<FormTemplate> FilteredForms { get; set; }
    private List<FormSubmission> AllSubmissions { get; set; }
    private string selectedDepartment = "";
    private string searchTerm = "";
    
    protected override async Task OnInitializedAsync()
    {
        AllForms = await FormService.GetFormTemplates();
        AllSubmissions = await FormService.GetFormSubmissions();
        FilteredForms = AllForms;
    }
    
    private List<string> GetUniqueDepartments()
    {
        return AllForms
            .Where(f => !string.IsNullOrEmpty(f.Department))
            .Select(f => f.Department)
            .Distinct()
            .OrderBy(d => d)
            .ToList();
    }
    
    private async Task SelectDepartment(string department)
    {
        selectedDepartment = department;
        await FilterForms();
    }
    
    private async Task FilterForms()
    {
        if (AllForms == null) return;
        
        var filtered = AllForms.AsEnumerable();
        
        // Apply department filter
        if (!string.IsNullOrEmpty(selectedDepartment))
        {
            filtered = filtered.Where(f => f.Department == selectedDepartment);
        }
        
        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(f => 
                f.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                (f.Description != null && f.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }
        
        FilteredForms = filtered.ToList();
    }
    
    private int GetSubmissionCount(string formId)
    {
        return AllSubmissions.Count(s => s.FormTemplateId == formId);
    }
    
    private async Task DeleteForm(string id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this form? All submissions will also be deleted.");
        
        if (confirmed)
        {
            await FormService.DeleteFormTemplate(id);
            
            // Refresh data
            AllForms = await FormService.GetFormTemplates();
            AllSubmissions = await FormService.GetFormSubmissions();
            await FilterForms();
        }
    }
    
    private async Task ExportDepartmentFormsReport()
    {
        // This would be implemented with JavaScript interop
        // to generate and download a department report
        await JSRuntime.InvokeVoidAsync("alert", $"Export {selectedDepartment} forms report functionality would be implemented here");
    }
}