@page "/login"
@using EFormBuilder.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.JSInterop
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Sign in to E-Form
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Enter your domain credentials to access the system
            </p>
        </div>
        
        <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" class="mt-8 space-y-6">
            <DataAnnotationsValidator />
            
            <div class="rounded-md shadow-sm -space-y-px">
                <div>
                    <label for="username" class="sr-only">Username</label>
                    <InputText id="username" class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm"
                              placeholder="Username" @bind-Value="loginModel.Username" />
                    <ValidationMessage For="@(() => loginModel.Username)" class="text-danger text-sm" />
                </div>
                <div>
                    <label for="password" class="sr-only">Password</label>
                    <InputText id="password" type="password" class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm"
                              placeholder="Password" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger text-sm" />
                </div>
            </div>

            <div>
                <button type="submit" class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                    Sign in
                </button>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                    @errorMessage
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var isValid = await AuthService.ValidateCredentials(loginModel.Username, loginModel.Password);
            
            if (isValid)
            {
                var userInfo = await AuthService.GetUserInfo(loginModel.Username);
                
                if (userInfo != null)
                {
                    // Store user information in session/local storage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "currentUser", 
                        System.Text.Json.JsonSerializer.Serialize(userInfo));
                    
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Failed to retrieve user information. Please try again.";
                }
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}