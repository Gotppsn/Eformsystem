@page "/forms/submissions/view/{Id}"
@using EFormBuilder.Models
@using EFormBuilder.Services
@inject IFormService FormService
@inject NavigationManager NavigationManager

<div class="container mx-auto px-4 py-6">
    @if (Submission == null || FormTemplate == null)
    {
        <div class="text-center p-6">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">
                Form Submission: @FormTemplate.Title
            </h1>
            <a href="/forms/submissions" class="btn btn-primary">
                <i class="fas fa-arrow-left mr-2"></i> Back to Submissions
            </a>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="md:col-span-2">
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="p-6 border-b">
                        <h2 class="text-xl font-semibold mb-2">Form Responses</h2>
                        <div class="text-sm text-gray-500">
                            Submitted on @Submission.SubmissionDate.ToString("MMMM dd, yyyy") at @Submission.SubmissionDate.ToString("HH:mm")
                        </div>
                    </div>
                    
                    <div class="p-6">
                        @foreach (var element in FormTemplate.Elements.OrderBy(e => e.Order))
                        {
                            <div class="mb-6 pb-6 border-b border-gray-200 last:border-b-0 last:mb-0 last:pb-0">
                                <div class="font-semibold text-gray-700 mb-1">@element.Label</div>
                                
                                @if (element.Type.ToLower() == "checkbox")
                                {
                                    <div class="mt-1">
                                        @(GetFormValue(element.Id) == "True" ? "Yes" : "No")
                                    </div>
                                }
                                else
                                {
                                    <div class="mt-1">
                                        @if (string.IsNullOrEmpty(GetFormValue(element.Id)))
                                        {
                                            <span class="text-gray-400 italic">No response</span>
                                        }
                                        else if (element.Type.ToLower() == "select")
                                        {
                                            var option = element.Options.FirstOrDefault(o => o.Value == GetFormValue(element.Id));
                                            @(option?.Label ?? GetFormValue(element.Id))
                                        }
                                        else
                                        {
                                            @GetFormValue(element.Id)
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="md:col-span-1">
                <div class="bg-white rounded-lg shadow-md overflow-hidden mb-6">
                    <div class="p-4 bg-gray-50 border-b">
                        <h3 class="font-semibold">Submission Details</h3>
                    </div>
                    <div class="p-4">
                        <div class="mb-3">
                            <div class="text-sm text-gray-500">Status</div>
                            <div class="@GetStatusClass(Submission.Status) px-2 inline-flex text-xs leading-5 font-semibold rounded-full mt-1">
                                @Submission.Status.ToString()
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="text-sm text-gray-500">Submission ID</div>
                            <div class="mt-1">@Submission.Id</div>
                        </div>
                        <div class="mb-3">
                            <div class="text-sm text-gray-500">Submitted By</div>
                            <div class="mt-1">@Submission.SubmittedBy</div>
                        </div>
                        <div>
                            <div class="text-sm text-gray-500">Submission Date</div>
                            <div class="mt-1">@Submission.SubmissionDate.ToString("MMMM dd, yyyy HH:mm")</div>
                        </div>
                    </div>
                </div>
                
                @if (Submission.Status == SubmissionStatus.Submitted)
                {
                    <div class="bg-white rounded-lg shadow-md overflow-hidden">
                        <div class="p-4 bg-gray-50 border-b">
                            <h3 class="font-semibold">Actions</h3>
                        </div>
                        <div class="p-4">
                            <div class="grid grid-cols-2 gap-2">
                                <button @onclick="() => UpdateStatus(SubmissionStatus.Approved)" class="btn btn-success">
                                    <i class="fas fa-check mr-2"></i> Approve
                                </button>
                                <button @onclick="() => UpdateStatus(SubmissionStatus.Rejected)" class="btn btn-danger">
                                    <i class="fas fa-times mr-2"></i> Reject
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    
    private FormSubmission Submission { get; set; }
    private FormTemplate FormTemplate { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            Submission = await FormService.GetFormSubmission(Id);
            
            if (Submission != null)
            {
                FormTemplate = await FormService.GetFormTemplate(Submission.FormTemplateId);
            }
        }
    }
    
    private string GetFormValue(string elementId)
    {
        if (Submission.FormData.TryGetValue(elementId, out var value))
        {
            return value;
        }
        
        return string.Empty;
    }
    
    private string GetStatusClass(SubmissionStatus status)
    {
        return status switch
        {
            SubmissionStatus.Draft => "bg-gray-100 text-gray-800",
            SubmissionStatus.Submitted => "bg-blue-100 text-blue-800",
            SubmissionStatus.InReview => "bg-yellow-100 text-yellow-800",
            SubmissionStatus.Approved => "bg-green-100 text-green-800",
            SubmissionStatus.Rejected => "bg-red-100 text-red-800",
            SubmissionStatus.Cancelled => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    
    private async Task UpdateStatus(SubmissionStatus newStatus)
    {
        await FormService.UpdateSubmissionStatus(Id, newStatus);
        
        // Refresh submission
        Submission = await FormService.GetFormSubmission(Id);
    }
}